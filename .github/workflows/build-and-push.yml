name: Build Image using Containerfile
on:
  workflow_dispatch:
  schedule:
  - cron: 30 5,17 * * *
  push:
    branches: [ "main" ]
    paths: [ "Dockerfile" ]

jobs:
  check:
    name: Version check
    runs-on: ubuntu-latest
    outputs:
      uptodate: ${{ steps.ver-chk.outputs.uptodate }}
    steps:
    - name: Version check
      id: ver-chk
      run: |
        if [ push = "${{ github.event_name == 'push' }}" ] ; then
          echo "uptodate=no" >> "$GITHUB_OUTPUT"
          exit 0
        fi
        CLRDEV_VER="$(curl -L 'https://quay.io/api/v1/repository/bucloud/clearlinux-dev/tag/?page=1&limit=100' | jq -r '.tags|map(select(.name=="latest").manifest_digest)[0]as$latest_digest|map(select(.manifest_digest==$latest_digest)|select(.name!="latest"))[0].name')"
        CLR_VER="`podman run --rm --pull=always docker.io/library/clearlinux:latest sh -c '. /etc/os-release ; echo "$VERSION_ID"'`"
        echo "uptodate=`[ "$CLRDEV_VER" = "$CLR_VER" ] && echo yes || echo no`" >> "$GITHUB_OUTPUT"
      
  build:
    name: Build image
    needs: check
    if: needs.check.outputs.uptodate == 'no'
    runs-on: ubuntu-latest

    steps:
    - name: Invoke subset of free_disk_space.sh from apache/flink
      run: |
        echo "=============================================================================="
        echo "Freeing up disk space on CI system"
        echo "=============================================================================="
        
        echo "Listing 100 largest packages"
        dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
        df -h
        echo "Removing large packages"
        sudo apt-get purge -y '^dotnet-.*' || :
        sudo apt-get purge -y '^llvm-.*' || :
        sudo apt-get purge -y 'php.*' || :
        sudo apt-get purge -y '^mongodb-.*' || :
        sudo apt-get purge -y '^mysql-.*' || :
        sudo apt-get purge -y '^google-chrome.*' || :
        sudo apt-get purge -y '^microsoft-edge.*' || :
        sudo apt-get purge -y '^temurin-.*' || :
        sudo apt-get purge -y azure-cli google-cloud-sdk hhvm firefox powershell mono-devel libgl1-mesa-dri || :
        sudo apt-get autoremove -y --purge
        sudo apt-get clean
        df -h
        echo "Removing large directories"
        
        sudo rm -rf /usr/share/dotnet/
        sudo rm -rf /usr/local/graalvm/
        sudo rm -rf /usr/local/.ghcup/
        sudo rm -rf /usr/local/share/powershell
        sudo rm -rf /usr/local/share/chromium
        sudo rm -rf /usr/local/lib/android
        df -h

    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        build-mount-path: /large_store
        root-reserve-mb: 512
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Enable btrfs zstd:3 compress for build space
      run: |
        store_dev=`sed -e '/^[^ ]* \/large_store /!d' -e 's@ .*@@g' -e '/^\/dev/!d' /proc/mounts | head -n 1`
        sudo umount /large_store
        sudo mkfs.btrfs -m single -d single -K -f "$store_dev"
        sudo mount -o autodefrag,noatime,nobarrier,nodiscard,noflushoncommit,notreelog,compress=zstd:3,commit=432000 "$store_dev" /large_store

    - name: Move podman storage to build space
      run: |
        sudo cp -va /var/lib/containers /large_store/sys-stor || sudo mkdir /large_store/sys-stor
        sudo mkdir /large_store/usr-stor && sudo chown runner:runner /large_store/usr-stor
        [ ! -d ~/.local/share/containers ] || cp -va ~/.local/share/containers/. /large_store/usr-stor/.
        sudo rm -vrf /var/lib/containers ~/.local/share/containers
        sudo ln -srv /large_store/sys-stor /var/lib/containers || :
        ln -srv /large_store/usr-stor ~/.local/share/containers || :
        sudo cp -va /var/tmp /large_store/vartmp
        sudo rm -vrf /var/tmp
        sudo ln -srv /large_store/vartmp /var/tmp
        sudo cp -va /home/runner /large_store/runner_home
        sudo rm -vrf /home/runner
        sudo ln -srv /large_store/runner_home /home/runner

    - uses: actions/checkout@v4

    - name: Buildah Action
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: clearlinux-dev
        tags: latest
        containerfiles: |
          ./Dockerfile

    - name: Get image tag
      id: get-tag
      run: |
        CLR_VER=`podman run --rm clearlinux-dev sh -c '. /etc/os-release ; echo "$VERSION_ID"'`
        echo "clearlinux_version_id=$CLR_VER" >> "$GITHUB_OUTPUT"
        podman image tag clearlinux-dev:latest "clearlinux-dev:$CLR_VER"

    - name: Push To quay.io
      id: push-to-quay
      uses: redhat-actions/push-to-registry@v2
      continue-on-error: true
      with:
        image: ${{ steps.build-image.outputs.image }}
        tags: ${{ steps.build-image.outputs.tags }} ${{ steps.get-tag.outputs.clearlinux_version_id }}
        registry: ${{ secrets.REGISTRY }}
        username: ${{ secrets.REGISTRY_USER }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Print image url
      if: steps.push-to-quay.outcome == 'success' && steps.push-to-quay.conclusion == 'success'
      continue-on-error: true
      run: echo "Image pushed to ${{ steps.push-to-quay.outputs.registry-paths }}"

    - name: Save image as file
      id: save-image
      continue-on-error: true
      run: |
        sudo mkdir /large_store/usertmp
        sudo chown runner:runner /large_store/usertmp
        podman image save clearlinux-dev | zstd -c -T0 -19 -v -v -v > /large_store/usertmp/clearlinux-dev.docker.tar.zst
        podman system reset -f

    - name: Upload image as artifact
      if: steps.save-image.outcome == 'success' && steps.save-image.conclusion == 'success'
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: clearlinux-dev-${{ steps.get-tag.outputs.clearlinux_version_id }}.docker.tar.zst
        path: /large_store/usertmp/clearlinux-dev.docker.tar.zst
